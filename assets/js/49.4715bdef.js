(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{389:function(t,s,a){"use strict";a.r(s);var n=a(40),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://www.bilibili.com/video/BV1e7411j7T5?p=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"webpack-性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-性能优化"}},[t._v("#")]),t._v(" webpack 性能优化")]),t._v(" "),a("h2",{attrs:{id:"开发环境性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发环境性能优化"}},[t._v("#")]),t._v(" 开发环境性能优化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- 优化打包构建速度\n\n  - HMR 模块热替换\n\n- 优化代码调试\n  - source-map\n")])])]),a("h2",{attrs:{id:"生产环境性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生产环境性能优化"}},[t._v("#")]),t._v(" 生产环境性能优化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- 优化打包构建速度\n\n  - oneOf\n  - babel 缓存\n  - 多进程打包\n  - externals\n  - dll\n\n- 优化代码运行的性能\n\n  - 文件缓存（hash、chunkhash、contenthash）\n  - tree shaking （树摇）\n  - code split（代码分隔）\n    - 单入口项目：默认打包输出到一个文件。\n      - 可以设置 optimization，会把引用 node_module 的文件单独打包输出。\n      - 在 js 中引用其它 js 文件时，可以使用 import 语法引入。\n    - 多入口。\n      - 设置 optimization 会提取公共代码，以防止打包重复代码。\n      - 也可用 import 语法。\n  - 懒加载、预加载（预加载兼容性不好）\n  - PWA\n")])])]),a("h1",{attrs:{id:"webpack-的常用配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的常用配置项"}},[t._v("#")]),t._v(" webpack 的常用配置项")]),t._v(" "),a("h2",{attrs:{id:"entry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entry"}},[t._v("#")]),t._v(" entry")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- string:\n  - eg: './src/index.js'\n  - 单入口，打包形成一个chunk，输出一个bundle文件。\n  - chunk的默认名称是main\n- array:\n  - eg: ['./src/index.js','./src/add.js']\n  - 多入口，所有入口文件最终只会形成一个chunk，只会输出一个bundle文件。\n  - 示例中add.js会被打包进index.js，同index.js一起输出。\n  - 使用场景：只在HMR功能中让html热更新生效。\n- object\n  - eg: {index: './src/js/index.js', add: './src/js/add.js'}\n  - 多入口，有多少个入口文件，就会形成多少个chunk，输出相应数量的bundle文件。\n  - chunk的名称就是key。\n")])])]),a("h2",{attrs:{id:"output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" output")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- filename:'js/[name].js\n- path:resolve(__dirname, 'dist')       //输出文件根目录（所有资源输出的公共目录）\n- publicPath:'/'                        //所有资源引入的公共路径前缀。\n- chunkFilename:'js/[name]_chunk.js'    //非入口chunk的命名\n- library:'name'                        //整个输出bundle向外暴露的变量名\n- libraryTarget:'window'                //将输出bundle的变量名添加到window上。\n")])])]),a("h2",{attrs:{id:"module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[t._v("#")]),t._v(" module")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- rules内的loader\n  - test:/\\.js$/\n  - exclude:/node_modules/\n  - include:resolve(__dirname,'src')  //只检查src下的js文件\n  - enforce:'pre'            //值为'pre’时，表示优先执行此loader，为'post'时，则表示延后执行\n  - loader:'eslint-loader'   //单个loader时直接用loader\n  - use:['style-loader','css-loader']  //多个loader时用use\n  - oneOf:[]    //每个文件只会使用oneOf中的一个loader\n  - options:{}  //修改loader的配置项\n")])])]),a("h2",{attrs:{id:"resolve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolve"}},[t._v("#")]),t._v(" resolve")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- 作用：解析模块的规则\n- alias:{}    //解析模块路径别名，在引用文件路径时，可简写文件路径\n- extensions:['.js','.json',...] //引用文件路径时，可省略文件扩展名。\n- modules:['node_modules']  //指示webpack解析模块去找哪个目录\n")])])]),a("h2",{attrs:{id:"devserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#devserver"}},[t._v("#")]),t._v(" devServer")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("devServer："),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    contentBase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dist'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运行代码的目录")]),t._v("\n    watchContentBase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//监视contentBase目录下的所有文件，一旦有文件变化就reload")]),t._v("\n    watchOptions"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ignored"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/node_modules/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//忽略对node_modules内文件的监视")]),t._v("\n    compress"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//启动gzip压缩")]),t._v("\n    port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'localhost'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    open"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自动打开浏览器")]),t._v("\n    hot"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开启HMR功能")]),t._v("\n    clientLogLevel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'none'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在终端中不要显示启动服务器日志信息")]),t._v("\n    quiet"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//除了一些基本启动信息以外，其它信息不要显示在终端")]),t._v("\n    overlay"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果出错，不要全屏提示")]),t._v("\n    proxy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一旦devServer服务器接受到 /api/xxx的请求，就会把请求转发到target")]),t._v("\n          target"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:3000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          pathRewrite"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送请求时，请求路径重写")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^/api'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将/api/xxx 转化为/xxx (去掉/api)")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"optimization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimization"}},[t._v("#")]),t._v(" optimization")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("optimization"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    splitChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     chunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'all'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// all表示同步和异步代码都进行代码分割，默认值为async")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//以下miniSize到cacheGroups为默认值，可以不写")]),t._v("\n     minSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//分割的chunk最小为30kb")]),t._v("\n     maxSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最大没限制")]),t._v("\n     minChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//提取的chunk最少被引用1次")]),t._v("\n     maxAsyncRequests"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//按需加载时并行加载的文件最大数量")]),t._v("\n     automaticNameDelimiter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'~'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//名称连接符")]),t._v("\n     name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可以使用命名规则")]),t._v("\n     cacheGroups"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分割chunk的组")]),t._v("\n       vendors"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[\\\\/]node_modules[\\\\/]/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//node_modules文件会被打包到vendors组的chunk中。eg:vendors~xxx.js")]),t._v("\n         priority"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//优先级")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         minChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//要提取的chunk最少被引用2次")]),t._v("\n         priority"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果当前要打包的模块，和之前已经被提取的模块是同一个，就会复用，而不是重新打包模块")]),t._v("\n         reuseExistingChunk"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将当前模块里记录其它模块的hash单独打包为一个runtime文件")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解决修改a文件，导致b文件的contenthash变化的问题。")]),t._v("\n  runtimeChunk"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("entrypoint")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("`runtime"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("entrypoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  minimizer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//配置生产环境的压缩方案（需安装terser-webpack-plugin）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TerserWebpackPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cache"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      parallel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开启多进程打包")]),t._v("\n      sourceMap"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),a("h1",{attrs:{id:"pwa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pwa"}},[t._v("#")]),t._v(" PWA")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- 安装 workbox-webpack-plugin\n- webpack 配置\n  ```js\n  const WorkboxPlugin = require('workbox-webpack-plugin')\n  // 在 plugins 添加下列配置(WorkboxPlugin.GenerateSw用于生成serviceWorker配置文件)\n  new WorkboxPlugin.GenerateSw({\n    clientsClaim: true,\n    skipWaiting: true,\n  })\n  ```\n- 入口 js 中添加下面代码\n  ```js\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker\n        .register('/service-worker.js') //注册serviceWorker配置文件\n        .then((register) => {\n          console.log('注册成功', register)\n        })\n        .catch((error) => {\n          console.log('注册失败', error)\n        })\n    })\n  }\n  ```\n- serviceWorker 代码必须运行在服务器上。\n\n  - 可以使用 serve 包，它可以快速创建服务器。\n  - 用指令'npx serve -s dist'来启动服务器，将 dist 目录下所有资源作为静态资源暴露出去。\n\n  #\n")])])]),a("h1",{attrs:{id:"thread-loader-多进程打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thread-loader-多进程打包"}},[t._v("#")]),t._v(" thread-loader 多进程打包")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- 安装 thread-loader\n- 进程启动大概为 600ms，进程通信也有开销，所以对于消耗短的 loader，则不要使用 thread-loader。\n- 要对某个 loader 使用 thread-loader，则要把 thread-loader 写在相应 loader 的前面。\n- 默认开启的进程数量为电脑核数减 1，也可通过配置指定。\n")])])]),a("h1",{attrs:{id:"dll"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dll"}},[t._v("#")]),t._v(" DLL")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- 与 webpack 中 externals 的对比：\n\n  - 两者都是让 webpack 忽略对指定的第三方库进行打包。\n  - externals 中被忽略的第三方库，需要自己手动在 html 中添加引用。\n  - DLL 需要先进行一次单独打包。\n\n- 使用步骤：\n\n  1. 新建并配置 webpack.dll.config.js 文件。\n  2. 运行'webpack --config webpack.dll.config.js'打包指令，将配置里的三方库打包输出，并生成 manifest.json 文件。\n  3. 安装包：'cnpm i -D add-asset-html-webpack-plugin'。\n  4. 在webpack.config.js中的 plugins 中添加下面代码：\n\n  ```js\n    //告诉webpack哪些库不参与打包\n    new webpack.DllReferencePlugin({\n      manifest: resolve(__dirname, 'dll/manifest.json'),\n    }),\n    // 将filepath中指定的文件复制到webpack输出根目录，并在html中添加对该文件的引用\n    new AddAssetHtmlWebpackPlugin({\n      filepath: resolve(__dirname, 'dll/vendors.js'),\n    }),\n  ```\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);