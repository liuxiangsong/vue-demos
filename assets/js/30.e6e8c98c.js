(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{370:function(t,e,i){"use strict";i.r(e);var v=i(40),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"git-命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-命令"}},[t._v("#")]),t._v(" git 命令")]),t._v(" "),i("p",[t._v("注：此文档默认远程版本库名为 origin_")]),t._v(" "),i("h2",{attrs:{id:"常用命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git init [仓库名称]")]),t._v(" //仓库名称为空时，则在当前文件夹下生成.git 文件夹")]),t._v(" "),i("li",[i("code",[t._v("git clone [仓库地址]")])]),t._v(" "),i("li",[i("code",[t._v("git checkout -b [local branch name] origin/[branch name]")]),t._v(" //在本地新建分支，并拉取远程分支代码")]),t._v(" "),i("li",[i("code",[t._v("git add .")])]),t._v(" "),i("li",[i("code",[t._v("git commit -m '提交内容'")])]),t._v(" "),i("li",[i("code",[t._v("git pull origin [branch name]")])]),t._v(" "),i("li",[i("code",[t._v("git push origin [branch name]")])]),t._v(" "),i("li",[i("code",[t._v("git restore .")])]),t._v(" "),i("li",[i("code",[t._v("git reset --soft HEAD~")])]),t._v(" "),i("li",[i("code",[t._v("git commit --amend")]),t._v(" //修改最近一次 commit 注释")]),t._v(" "),i("li",[i("code",[t._v("git rm -r --cached [文件(夹)名称]")]),t._v(" //git 忽略已提交的文件夹,-r 为递归删除，移除文件时，不需加该参数")])]),t._v(" "),i("h2",{attrs:{id:"操作分支相关命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#操作分支相关命令"}},[t._v("#")]),t._v(" 操作分支相关命令")]),t._v(" "),i("ul",[i("li",[t._v("查看本地分支："),i("code",[t._v("git branch")])]),t._v(" "),i("li",[t._v("查看远程分支： "),i("code",[t._v("git branch -r")])]),t._v(" "),i("li",[t._v("查看所有分支： "),i("code",[t._v("git branch -a")])]),t._v(" "),i("li",[t._v("创建本地分支： "),i("code",[t._v("git branch [name]")])]),t._v(" "),i("li",[t._v("切换本地分支： "),i("code",[t._v("git checkout [name]")])]),t._v(" "),i("li",[t._v("新建并切换分支： "),i("code",[t._v("git checkout -b [name]")])]),t._v(" "),i("li",[t._v("新建并拉取远程分支："),i("code",[t._v("git checkout -b [name] origin/[name]")])]),t._v(" "),i("li",[t._v("删除分支： "),i("code",[t._v("git branch -d [name]")])]),t._v(" "),i("li",[t._v("合并分支： "),i("code",[t._v("git merge [name]")])]),t._v(" "),i("li",[t._v("创建远程分支(本地分支 push 到远程)： "),i("code",[t._v("git push origin [name]")])]),t._v(" "),i("li",[t._v("删除远程分支: "),i("code",[t._v("git push origin --delete [name]")])])]),t._v(" "),i("h2",{attrs:{id:"stash"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#stash"}},[t._v("#")]),t._v(" stash")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git stash save '备注信息'")]),t._v(" // 保存未提交的修改至堆栈中")]),t._v(" "),i("li",[i("code",[t._v("git stash list")]),t._v(" //查看当前 stash 中的内容")]),t._v(" "),i("li",[i("code",[t._v("git stash pop")]),t._v(" //将当前 stash 中的内容弹出到当前工作目录，并删除此 stash")]),t._v(" "),i("li",[i("code",[t._v("git stash show")]),t._v(" //查看堆栈中最新保存的 stash 和当前目录的差异")]),t._v(" "),i("li",[i("code",[t._v("git stash apply")]),t._v(" //将当前 stash 中的内容应用到当前工作目录，但不删除此 stash")]),t._v(" "),i("li",[i("code",[t._v("git stash apply [stash name]")]),t._v(" //恢复指定 stash 到当前工作目录(stash name 如 stash@{1})")]),t._v(" "),i("li",[i("code",[t._v("git stash drop [stash name]")]),t._v(" //移除指定 stash")]),t._v(" "),i("li",[i("code",[t._v("git stash clear")])])]),t._v(" "),i("h2",{attrs:{id:"远程仓库相关命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库相关命令"}},[t._v("#")]),t._v(" 远程仓库相关命令")]),t._v(" "),i("ul",[i("li",[t._v("查看远程仓库： "),i("code",[t._v("git remote -v")])]),t._v(" "),i("li",[t._v("查看远程仓库信息："),i("code",[t._v("git remote show origin")])]),t._v(" "),i("li",[t._v("删除远程仓库： "),i("code",[t._v("git remote rm [name]")])]),t._v(" "),i("li",[t._v("更新本地关联的远程分支："),i("code",[t._v("git remote update origin --prune")])])]),t._v(" "),i("h2",{attrs:{id:"版本回退"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git reset --soft/hard HEAD~")]),t._v(" //~后可加数字，默认为 1；eg HEAD~2,表示回退 2 个版本")]),t._v(" "),i("li",[i("code",[t._v("git reset [<mode>] [<commit>]")]),t._v(" //mode：--soft, --hard, --mixed; --soft 不会修改暂存区和工作区中的内容，而--hard 则会彻底还原至上次提交的状态，本次提交的内容会被清除")]),t._v(" "),i("li",[i("code",[t._v("git log --pretty=oneline")]),t._v(" //查看提交日志，参数 oneline 表示一行显示")])]),t._v(" "),i("h2",{attrs:{id:"git-代理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-代理"}},[t._v("#")]),t._v(" git 代理")]),t._v(" "),i("ul",[i("li",[t._v("git config --global https.proxy [http://127.0.0.1:1080]")]),t._v(" "),i("li",[t._v("git config --global https.proxy [https://127.0.0.1:1080]")]),t._v(" "),i("li",[t._v("git config --global --unset http.proxy")]),t._v(" "),i("li",[t._v("git config --global --unset https.proxy")])]),t._v(" "),i("p",[i("a",{attrs:{href:"https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文档"),i("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=_.exports}}]);