(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{345:function(t,e,n){"use strict";n.r(e);var a=n(40),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"反序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反序列化"}},[t._v("#")]),t._v(" 反序列化")]),t._v(" "),n("div",{staticClass:"language-C# extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('       public static T DeserializeJson<T>(string jsonString)\n        {\n            if (string.IsNullOrWhiteSpace(jsonString) || !jsonString.Contains("{") || !jsonString.Contains("}"))\n            {\n                return default(T);\n            }\n            try\n            {\n                return JsonConvert.DeserializeObject<T>(jsonString);\n            }\n            catch\n            {\n                return default(T); ;\n            }\n        }\n')])])]),n("h1",{attrs:{id:"深度克隆对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深度克隆对象"}},[t._v("#")]),t._v(" 深度克隆对象")]),t._v(" "),n("div",{staticClass:"language-C# extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("        public static T Clone<T>(T obj)\n        {\n            if (obj == null) return default(T);\n            try\n            {\n                using (Stream objectStream = new MemoryStream())\n                {\n                    IFormatter formatter = new BinaryFormatter();\n                    formatter.Serialize(objectStream, obj);\n                    objectStream.Seek(0, SeekOrigin.Begin);\n                    return (T)formatter.Deserialize(objectStream);\n                }\n            }\n            catch (Exception)\n            {\n                return default(T);\n            }\n        }\n\n        public static List<T> CloneList<T>(List<T> list)\n        {\n            if (list == null) return null;\n            using (Stream objectStream = new MemoryStream())\n            {\n                IFormatter formatter = new BinaryFormatter();\n                formatter.Serialize(objectStream, list);\n                objectStream.Seek(0, SeekOrigin.Begin);\n                return formatter.Deserialize(objectStream) as List<T>;\n            }\n        }\n")])])]),n("h1",{attrs:{id:"datatable和对象互转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#datatable和对象互转"}},[t._v("#")]),t._v(" DataTable和对象互转")]),t._v(" "),n("ul",[n("li",[t._v("DataTable转对象")])]),t._v(" "),n("div",{staticClass:"language-C# extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("        public static T DataRowToEntity<T>(DataRow dr) where T : class\n        {\n            var entity = default(T);\n            if (dr == null)\n            {\n                return entity;\n            }\n            entity = Activator.CreateInstance<T>();\n            foreach (var p in entity.GetType().GetProperties())\n            {\n                if (dr.Table.Columns.Contains(p.Name) && p.CanWrite)\n                {\n                    p.SetValue(entity, dr[p.Name].As<string>(), null);\n                }\n            }\n            return entity;\n        }\n\n        public static List<T> DataTableToList<T>(DataTable dt) where T : class\n        {\n            if (dt == null || dt.Rows.Count == 0)\n            {\n                return null;\n            }\n            return dt.Rows.Cast<DataRow>().Select(DataRowToEntity<T>).ToList();\n        }        \n")])])]),n("ul",[n("li",[t._v("List转DataTable")])]),t._v(" "),n("div",{staticClass:"language-C# extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" public static DataTable ListToDataTable<T>(List<T> list) where T : class\n        {\n            if (list == null || list.Count <= 0)\n            {\n                return null;\n            }\n            var table = new DataTable(typeof(T).Name);\n\n            var myPropertyInfo = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);\n            foreach (var info in myPropertyInfo)\n            {\n                table.Columns.Add(info.Name, Nullable.GetUnderlyingType(info.PropertyType) ?? info.PropertyType);\n            }\n            foreach (var entity in list)\n            {\n                var row = table.NewRow();\n                for (var index = 0; index < myPropertyInfo.Length; index++)\n                {\n                    row[index] = myPropertyInfo[index].GetValue(entity, null) ?? DBNull.Value;\n                }\n                table.Rows.Add(row);\n            }\n            return table;\n        }\n")])])]),n("h1",{attrs:{id:"文件相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文件相关"}},[t._v("#")]),t._v(" 文件相关")]),t._v(" "),n("div",{staticClass:"language-C# extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("        public static string FileToBase64(string path)\n        {\n            var fs = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);\n            var size = fs.Length;\n            var array = new byte[size];\n            fs.Read(array, 0, array.Length);\n            fs.Close();\n            return Convert.ToBase64String(array);\n        }\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);